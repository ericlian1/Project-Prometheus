'''Module: read_mod_aerosol_and_list_sds.py==========================================================================================Disclaimer: The code is for demonstration purposes only. Users are responsible to check for accuracy and revise to fit their objective.Author: Justin Roberts-Pierel, 2015 Organization: NASA ARSETPurpose: To print all SDS from an HDF4 fileSee the README associated with this module for more information.=========================================================================================='''#import necessary modulesfrom pyhdf.SD import SD, SDCimport numpy as npimport os, globfrom datetime import datetime, timedeltaimport matplotlib.pyplot as pltimport pandas as pddata_names = ['LST_Day','LST_Night']df = pd.read_csv('jhu_covid19.csv',parse_dates=['dt'])d = pd.read_csv('states_abbr.csv')d = dict(zip(d[' NAME'].str.lstrip(" ").str.replace("\"",""),d['ABBREVIATION']))df['state'] = df['ST_Name'].map(d)df.rename(columns={'Countyname':'county'},inplace=True)df = df[~(df.county.str.contains("Out of",na=False)) & ~(df.county == "Unassigned")]df.dropna(how='all',inplace=True)#df.index = pd.to_datetime(df['dt'],infer_datetime_format = True)df.set_index(['state','county'],inplace=True)df.reindex(columns = df.columns.tolist() + data_names)counties = pd.read_csv('zip_codes_states.csv')counties = counties.drop(columns='zip_code').groupby(['state','county']).mean()def get_temp_from_loc(row,data):    return data[int((90-row['latitude'])/0.05), int((row['longitude']+180)/0.05)]def replace_missing(row,date,data):    if row['dt'] < date and (row['LST_Day'] == 0 or row['LST_Night'] == 0):        return #counties['lat_index'], counties['lon_index'] = loc_to_index(counties['latitude'],counties['longitude'])def parse_temp(df):    b = datetime(2019, 12, 31)    x = b + timedelta(days=1)    ddays = []; dnights = []    #loops through all files listed in the text file    for FILE_NAME in glob.glob('temperature/*.hdf'):        FILE_NAME=FILE_NAME.strip()        try:            # open the hdf file for reading            hdf=SD(FILE_NAME)        except:            print('Unable to open file: \n' + FILE_NAME + '\n Skipping...')            continue        doy = int(FILE_NAME.split('.')[1][5:])        print(doy)        date = b + timedelta(days=doy)        #extract the list of SDS in the hdf4 file        data=hdf.datasets()        daytemp = hdf.select('LST_Day_CMG')[:,:]*0.02        nighttemp = hdf.select('LST_Night_CMG')[:,:]*0.02                temp = counties.copy()        temp['LST_Day'] = temp.apply(lambda row: get_temp_from_loc(row,daytemp),axis=1)        temp['LST_Night'] = temp.apply(lambda row: get_temp_from_loc(row,nighttemp),axis=1)        dday, dnight = np.count_nonzero(temp['LST_Day'])/len(temp),np.count_nonzero(temp['LST_Night'])/len(temp)        ddays.append(dday); dnights.append(dnight)        print(dday,dnight)        if doy > 22:            #print(df)            for i in data_names:                missing_vals = df[(df[i] == 0) & (df.dt < date)].drop(columns=i)                missing_vals = pd.merge(missing_vals,temp[temp[i]!=0][i],on=['state','county'])                missing_vals.set_index('dt',append=True,inplace=True)                df.set_index('dt',append=True,inplace=True)                df.update(missing_vals)                df.reset_index(level='dt',inplace=True)            # print("updated missing vals")            # print(df)            # print(df.equals(d))                df_date = df.drop(columns=data_names)[df.dt == date]        merged = pd.merge(df_date,temp[data_names],on=['state','county'])        # print("merged")        # print(merged)        merged.set_index('dt',append=True,inplace=True)        df.set_index('dt',append=True,inplace=True)        df.update(merged)        df.reset_index(level='dt',inplace=True)        # print("og data")        # print(df[df.dt==date])        # print(df[df.dt==date]['dt'])                #asks if the user would like to continue to the next file, exits if not    df.to_csv('jhu_covid19_t.csv')    print('\nAll valid files given have been processed')    print(np.mean(ddays),np.mean(dnights))    # 0.4846164062154146 0.5043580700537627    print(np.median(ddays),np.median(dnights))    # 0.4617291602107221 0.49085838239851254    print(min(ddays),min(dnights))    # 0.18933994422063835 0.21258134490238612    print(max(ddays),max(dnights))    # 0.9042454291911992 0.8317322590641463    fig, (ax1,ax2) = plt.subplot((2,1))    ax1.hist(ddays)    ax1.set_title('Data Coverage for LST_Day')    ax2.hist(dnights)    ax2.set_title('Data Coverage for LST_Night')    plt.show()#df.to_csv('jhu_covid19.csv',index=None)parse_temp(df)