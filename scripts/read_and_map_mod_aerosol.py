#!/usr/bin/python'''Module: read_and_map_mod_aerosol.py==========================================================================================Disclaimer: The code is for demonstration purposes only. Users are responsible to check for accuracy and revise to fit their objective.Author: Justin Roberts-Pierel, 2015 Organization: NASA ARSETPurpose: To extract AOD data from a MODIS HDF4 file (or series of files) and create a map of the resulting dataSee the README associated with this module for more information.=========================================================================================='''#import necessary modulesfrom pyhdf import SDimport numpy as npfrom mpl_toolkits.basemap import Basemapimport matplotlib.pyplot as pltimport sysimport glob#loops through all files listed in the text filefor FILE_NAME in ['temperature/MYD11C1.A2020022.006.2020027211827.hdf']:	FILE_NAME=FILE_NAME.strip()	try:		# open the hdf file for reading		hdf=SD.SD(FILE_NAME)	except:		print('Unable to open file: \n' + FILE_NAME + '\n Skipping...')		continue		# Get lat and lon info	latitude = np.arange(-90,90.05,0.05)[::-1]	print(latitude)	longitude = np.arange(-180,180.05,0.05)	print(longitude)	#get AOD SDS, or exit if it doesn't find the SDS in the file	try:		sds=hdf.select('LST_Day_CMG')	except:		print('Sorry, your MODIS hdf file does not contain the SDS:','LST_Day_CMG','. Please try again with the correct file type.')		sys.exit()	#get scale factor for AOD SDS	attributes=sds.attributes()	scale_factor=attributes['scale_factor']	#get valid range for AOD SDS	range=sds.getrange()	min_range=min(range)	max_range=max(range)		#get SDS data	data=sds.get()	#get data within valid range	valid_data=data.ravel()	valid_data=[x for x in valid_data if x>=min_range]	valid_data=[x for x in valid_data if x<=max_range]	valid_data=np.asarray(valid_data)	#scale the valid data	valid_data=valid_data*scale_factor	attrs = sds.attributes(full=1)	fillvalue=attrs['_FillValue']	# fillvalue[0] is the attribute value (-9999)	fv = fillvalue[0]	#turn fillvalues to NaN	data=data.astype(float)	data[data == fv] = np.nan	#create the map	data = np.ma.masked_array(data, np.isnan(data))	m = Basemap(projection='cyl', resolution='l', llcrnrlat=-90, urcrnrlat = 90, llcrnrlon=-180, urcrnrlon = 180)	m.drawcoastlines(linewidth=0.5)	m.drawparallels(np.arange(-90., 120., 5.), labels=[1, 0, 0, 0])	m.drawmeridians(np.arange(-180., 181., 5.), labels=[0, 0, 0, 1])	x, y = m(longitude, latitude)	m.pcolormesh(x, y, data*scale_factor)	plt.autoscale()	#create colorbar	cb = m.colorbar()	#label colorboar	cb.set_label('AOD')		#title the plot	plotTitle=FILE_NAME[:-4]	plt.title('{0}\n {1}'.format(plotTitle, 'LST_Day_CMG'))	fig = plt.gcf()	# Show the plot window.	plt.show()	#once you close the map it asks if you'd like to save it	# is_save=str(input('\nWould you like to save this map? Please enter Y or N \n'))	# if is_save == 'Y' or is_save == 'y':	# 	#saves as a png if the user would like	# 	pngfile = '{0}.png'.format(plotTitle)	# 	fig.savefig(pngfile)print('\nAll valid files have been processed.')